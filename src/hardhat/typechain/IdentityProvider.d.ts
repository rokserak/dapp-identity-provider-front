/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface IdentityProviderInterface extends ethers.utils.Interface {
  functions: {
    "addUser(tuple)": FunctionFragment;
    "getUserInfo()": FunctionFragment;
    "updateUser(tuple)": FunctionFragment;
    "userCount()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addUser",
    values: [
      {
        given_name: string;
        middle_name: string;
        family_name: string;
        nickname: string;
        picture: string;
        email: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateUser",
    values: [
      {
        given_name: string;
        middle_name: string;
        family_name: string;
        nickname: string;
        picture: string;
        email: string;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "userCount", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userCount", data: BytesLike): Result;

  events: {};
}

export class IdentityProvider extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: IdentityProviderInterface;

  functions: {
    addUser(
      user: {
        given_name: string;
        middle_name: string;
        family_name: string;
        nickname: string;
        picture: string;
        email: string;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addUser((string,string,string,string,string,string))"(
      user: {
        given_name: string;
        middle_name: string;
        family_name: string;
        nickname: string;
        picture: string;
        email: string;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getUserInfo(overrides?: CallOverrides): Promise<{
      0: {
        sub: string;
        name: string;
        given_name: string;
        middle_name: string;
        family_name: string;
        nickname: string;
        picture: string;
        updated_at: BigNumber;
        email: string;
        email_verified: boolean;
        0: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: BigNumber;
        8: string;
        9: boolean;
      };
    }>;

    "getUserInfo()"(overrides?: CallOverrides): Promise<{
      0: {
        sub: string;
        name: string;
        given_name: string;
        middle_name: string;
        family_name: string;
        nickname: string;
        picture: string;
        updated_at: BigNumber;
        email: string;
        email_verified: boolean;
        0: string;
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: BigNumber;
        8: string;
        9: boolean;
      };
    }>;

    updateUser(
      user: {
        given_name: string;
        middle_name: string;
        family_name: string;
        nickname: string;
        picture: string;
        email: string;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateUser((string,string,string,string,string,string))"(
      user: {
        given_name: string;
        middle_name: string;
        family_name: string;
        nickname: string;
        picture: string;
        email: string;
      },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    userCount(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;

    "userCount()"(overrides?: CallOverrides): Promise<{
      0: BigNumber;
    }>;
  };

  addUser(
    user: {
      given_name: string;
      middle_name: string;
      family_name: string;
      nickname: string;
      picture: string;
      email: string;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addUser((string,string,string,string,string,string))"(
    user: {
      given_name: string;
      middle_name: string;
      family_name: string;
      nickname: string;
      picture: string;
      email: string;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getUserInfo(
    overrides?: CallOverrides
  ): Promise<{
    sub: string;
    name: string;
    given_name: string;
    middle_name: string;
    family_name: string;
    nickname: string;
    picture: string;
    updated_at: BigNumber;
    email: string;
    email_verified: boolean;
    0: string;
    1: string;
    2: string;
    3: string;
    4: string;
    5: string;
    6: string;
    7: BigNumber;
    8: string;
    9: boolean;
  }>;

  "getUserInfo()"(
    overrides?: CallOverrides
  ): Promise<{
    sub: string;
    name: string;
    given_name: string;
    middle_name: string;
    family_name: string;
    nickname: string;
    picture: string;
    updated_at: BigNumber;
    email: string;
    email_verified: boolean;
    0: string;
    1: string;
    2: string;
    3: string;
    4: string;
    5: string;
    6: string;
    7: BigNumber;
    8: string;
    9: boolean;
  }>;

  updateUser(
    user: {
      given_name: string;
      middle_name: string;
      family_name: string;
      nickname: string;
      picture: string;
      email: string;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateUser((string,string,string,string,string,string))"(
    user: {
      given_name: string;
      middle_name: string;
      family_name: string;
      nickname: string;
      picture: string;
      email: string;
    },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  userCount(overrides?: CallOverrides): Promise<BigNumber>;

  "userCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addUser(
      user: {
        given_name: string;
        middle_name: string;
        family_name: string;
        nickname: string;
        picture: string;
        email: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "addUser((string,string,string,string,string,string))"(
      user: {
        given_name: string;
        middle_name: string;
        family_name: string;
        nickname: string;
        picture: string;
        email: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    getUserInfo(
      overrides?: CallOverrides
    ): Promise<{
      sub: string;
      name: string;
      given_name: string;
      middle_name: string;
      family_name: string;
      nickname: string;
      picture: string;
      updated_at: BigNumber;
      email: string;
      email_verified: boolean;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: BigNumber;
      8: string;
      9: boolean;
    }>;

    "getUserInfo()"(
      overrides?: CallOverrides
    ): Promise<{
      sub: string;
      name: string;
      given_name: string;
      middle_name: string;
      family_name: string;
      nickname: string;
      picture: string;
      updated_at: BigNumber;
      email: string;
      email_verified: boolean;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: string;
      7: BigNumber;
      8: string;
      9: boolean;
    }>;

    updateUser(
      user: {
        given_name: string;
        middle_name: string;
        family_name: string;
        nickname: string;
        picture: string;
        email: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    "updateUser((string,string,string,string,string,string))"(
      user: {
        given_name: string;
        middle_name: string;
        family_name: string;
        nickname: string;
        picture: string;
        email: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    userCount(overrides?: CallOverrides): Promise<BigNumber>;

    "userCount()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    addUser(
      user: {
        given_name: string;
        middle_name: string;
        family_name: string;
        nickname: string;
        picture: string;
        email: string;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addUser((string,string,string,string,string,string))"(
      user: {
        given_name: string;
        middle_name: string;
        family_name: string;
        nickname: string;
        picture: string;
        email: string;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    getUserInfo(overrides?: CallOverrides): Promise<BigNumber>;

    "getUserInfo()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateUser(
      user: {
        given_name: string;
        middle_name: string;
        family_name: string;
        nickname: string;
        picture: string;
        email: string;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateUser((string,string,string,string,string,string))"(
      user: {
        given_name: string;
        middle_name: string;
        family_name: string;
        nickname: string;
        picture: string;
        email: string;
      },
      overrides?: Overrides
    ): Promise<BigNumber>;

    userCount(overrides?: CallOverrides): Promise<BigNumber>;

    "userCount()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addUser(
      user: {
        given_name: string;
        middle_name: string;
        family_name: string;
        nickname: string;
        picture: string;
        email: string;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addUser((string,string,string,string,string,string))"(
      user: {
        given_name: string;
        middle_name: string;
        family_name: string;
        nickname: string;
        picture: string;
        email: string;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getUserInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getUserInfo()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateUser(
      user: {
        given_name: string;
        middle_name: string;
        family_name: string;
        nickname: string;
        picture: string;
        email: string;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateUser((string,string,string,string,string,string))"(
      user: {
        given_name: string;
        middle_name: string;
        family_name: string;
        nickname: string;
        picture: string;
        email: string;
      },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    userCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "userCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
